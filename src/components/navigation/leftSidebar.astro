---
import clsx from "clsx";
import { getIsRtlFromUrl } from "../../languages";
import { Frontmatter, SIDEBAR, SIDEBAR_HEADER_MAP } from "../../config";
import Search from "./Search";
import { checkLanding } from "../../utils/theme";

export interface Props {
  frontmatter?: Frontmatter;
  currentPage: string;
  isNotFound?: boolean;
}

const { frontmatter, currentPage, isNotFound } = Astro.props;
const isLanding = checkLanding(currentPage) || !!isNotFound;
const hasTrailing = currentPage.endsWith("/");
const currentPageMatch = currentPage.slice(
  1,
  hasTrailing ? -1 : currentPage.length,
);
const isRtl = getIsRtlFromUrl(currentPage);

const langCode = frontmatter?.lang ?? "en";
const englishSidebar = SIDEBAR["en"];
const nativeSidebar = SIDEBAR[langCode];
let sidebar: Record<
  string,
  { text: string; link: string; isTranslated?: boolean }[]
> = englishSidebar;
if (langCode !== "en") {
  sidebar = Object.fromEntries(
    Object.entries(englishSidebar).map(([header, items]) => {
      // Set header to translated one if it exists
      // TODO: type this properly at the source
      const innerHeader = SIDEBAR_HEADER_MAP[langCode];
      const nativeHeader =
        innerHeader[header as keyof typeof innerHeader] ?? header;

      const nativeItems = items.map((item) => {
        const match = Object.values(nativeSidebar)
          .flat()
          .find(
            ({ link: nativeLink }) =>
              // trailing slash + language code
              nativeLink.slice(langCode.length + 1) === item.link.slice(3),
          );
        return {
          text: match?.text ?? item.text,
          link: match?.link ?? item.link,
          isTranslated: !!match,
        };
      });

      return [nativeHeader, nativeItems];
    }),
  );
}
---

<div class="mx-auto ml--40 mb-6 w-full px-6 md:ml-0 md:hidden md:px-8">
  <Search isLanding={isLanding} client:idle />
</div>
<div
  dir="ltr"
  class="t3-scrollbar h-full w-full bg-default transition-colors duration-300 lg:mb-12"
>
  <ul
    dir={isRtl ? "rtl" : "ltr"}
    class="px-4 pb-28 text-slate-900 dark:text-dnt-orange-50 md:pb-0"
  >
    {
      Object.entries(sidebar).map(([header, children]) => (
        <li>
          <div>
            <h2
              class={clsx(
                "pb-2 text-xl font-semibold transition-colors duration-300 sm:text-lg",
                {
                  // mobile menu on landing page
                  "text-slate-50": isLanding,
                },
              )}
            >
              {header}
            </h2>
            <ul class="mb-2">
              {children.map((child) => {
                const url = Astro.site?.pathname + child.link;
                const isActive = currentPageMatch === child.link;
                return (
                  <li>
                    <a
                      href={url}
                      aria-current={isActive ? "page" : false}
                      class={clsx([
                        "text-md block py-2 rounded-r-lg text-dnt-orange-800 transition-colors [padding-inline-start:16px] hover:border-dnt-orange-300/50 hover:bg-dnt-orange-300/20 hover:text-dnt-orange-400 dark:text-dnt-orange-200 dark:hover:bg-dnt-orange-300/10 dark:hover:text-dnt-orange-100",
                        isActive
                          ? "border-dnt-orange-300 bg-dnt-orange-300/30 font-medium dark:bg-dnt-orange-300/20"
                          : "border-dnt-orange-300/20",
                        isRtl ? "border-r-2" : "border-l-2",
                      ])}
                    >
                      <span>{child.text}</span>
                      {!child.isTranslated && langCode !== "en" && (
                        <span class="text-xs text-dnt-orange-400 [margin-inline-start:4px] dark:text-dnt-orange-300">
                          EN
                        </span>
                      )}
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        </li>
      ))
    }
  </ul>
</div>
