---
import { clsx } from "clsx";
import Logo from "./logo.astro"
import ThemeToggleButton from "./themeToggleButton.astro";

export interface Props {
  isNotFound?: boolean;
}

const { pathname } = Astro.url;
const hasTrailing = pathname.endsWith("/");
const currentPage = pathname.slice(0, hasTrailing ? -1 : pathname.length);
// const langCode = getLanguageFromURL(pathname);

const navbarLinks: Array<{
  pattern: RegExp;
  position: "left" | "right";
  href: string;
  label: string;
}> = [
  {
    pattern: new RegExp(
      "^\b$" /* dont want the home button to appear selected */
    ),
    position: "left",
    href: "/",
    label: "Home",
  },
  {
    pattern: new RegExp("^/publications"),
    href: "/publications",
    position: "left",
    label: "Publications",
  },
  {
    pattern: new RegExp("^/partnerships"),
    href: "/partnerships",
    position: "left",
    label: "Partnerships",
  },
  {
    pattern: new RegExp(
      "^\b$" /* dont want the join button to appear selected */
    ),
    position: "right",
    href: "/join",
    label: "Join us",
  },
];
---

<nav
  class= "navbar flex flex-col relative justify-between items-center py-1 transition-colors duration-300"
  aria-label="Global"
>
  <div class="flex w-full max-w-7xl items-center justify-between px-4">
    <div class="flex w-full items-center justify-between">
      <div>
        <a href="/" class="flex" title="Home">
          <Logo></Logo>
        </a>
      </div>
      <div class="ml-4 hidden flex-row gap-2 md:flex">
        {
          navbarLinks
            .filter((navbarLink) => navbarLink.position === "left")
            .map((navbarLink) => (
              <a
                class={clsx(
                  "relative inline-flex items-center rounded-full border border-transparent px-4 py-2 text-dnt-orange-800 transition-colors hover:bg-dnt-orange-200/50 hover:text-dnt-orange-800 hover:no-underline dark:text-dnt-orange-100 dark:hover:bg-dnt-orange-200/10 dark:hover:text-dnt-orange-300",
                  {
                    "bg-dnt-orange-200/50 dark:border-dnt-orange-200/20 dark:bg-dnt-orange-200/10 dark:hover:border-dnt-orange-200/50":
                      navbarLink.pattern.exec(currentPage),
                  }
                )}
                aria-current={
                  navbarLink.href === currentPage ? "page" : "false"
                }
                href={navbarLink.href}
              >
                {navbarLink.label}
              </a>
            ))
        }
      </div>
      <div class="flex flex-grow"></div>
      <div id="nav-icon" class="md:hidden">
        <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-10 w-10 fill-transparent stroke-current"
        viewBox="0 0 24 24"
        id="nav-open"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16">
          </path>
        </svg>
        <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-10 w-10 fill-transparent stroke-current hidden"
        viewBox="0 0 24 24"
        width="24"
        height="24"
        stroke="black"
        stroke-width="2.2"
        stroke-linecap="round"
        stroke-linejoin="round"
        id="nav-close"
        >
          <line x1="4" y1="4" x2="20" y2="20" />
          <line x1="20" y1="4" x2="4" y2="20" />
        </svg>
        <!-- <img
        src={closeSVG}
        alt="nav icon close"
        id="nav-close"
        class="hidden"
        > -->
      </div>
    </div>
    <div class="flex flex-grow items-center justify-end gap-4">
      <div class="ml-4 hidden flex-grow flex-row gap-2 md:flex">
        {
          navbarLinks
            .filter((navbarLink) => navbarLink.position === "right")
            .map((navbarLink) => (
              <a
                class={clsx(
                  "relative inline-flex items-center whitespace-nowrap rounded-full border bg-dnt-orange-200/50 px-4 py-2 text-dnt-orange-800 hover:bg-dnt-orange-200/75 hover:no-underline dark:border-dnt-orange-200/20 dark:bg-dnt-orange-200/10 dark:text-dnt-orange-100 dark:hover:border-dnt-orange-200/50",
                  {
                    "bg-dnt-orange-200/10 dark:border-dnt-orange-200/20 dark:bg-dnt-orange-200/50 dark:hover:border-dnt-orange-200/50":
                      navbarLink.pattern.exec(currentPage),
                  }
                )}
                aria-current={
                  navbarLink.href === currentPage ? "page" : "false"
                }
                href={navbarLink.href}
              >
                {navbarLink.label}
              </a>
            ))
        }
      </div>

      <div class="hidden md:block mx-auto">
        <ThemeToggleButton />
      </div>
    </div>
  </div>
</nav>
<div id="mobile-nav-dropdown" class="flex flex-col hidden items-end pr-4">
  {
    navbarLinks
      .filter((navbarLink) => (navbarLink.position === "left" || navbarLink.label === "Join us"))
      .map((navbarLink) => (
        <a
          class={clsx(
            "relative inline-flex items-center rounded-full border border-transparent px-4 py-2 text-dnt-orange-800 transition-colors hover:bg-dnt-orange-200/50 hover:text-dnt-orange-800 hover:no-underline dark:text-dnt-orange-100 dark:hover:bg-dnt-orange-200/10 dark:hover:text-dnt-orange-300",
            {
              "bg-dnt-orange-200/50 dark:border-dnt-orange-200/20 dark:bg-dnt-orange-200/10 dark:hover:border-dnt-orange-200/50":
                navbarLink.pattern.exec(currentPage),
            }
          )}
          aria-current={
            navbarLink.href === currentPage ? "page" : "false"
          }
          href={navbarLink.href}
        >
          {navbarLink.label}
        </a>
      ))
  }
  <div class="px-4 py-2">
    <ThemeToggleButton/>
  </div>
</div>

<script>
  const navIcon = document.getElementById("nav-icon");
  const navOpen = document.getElementById("nav-open");
  const navClose = document.getElementById("nav-close");
  let navContent = document.getElementById("mobile-nav-dropdown");
  let hidden = true;
  if (navIcon) {
    navIcon.addEventListener("click", () => {
    hidden = !hidden;
    if (navContent) {
      navContent.style.display = hidden ? "none" : "flex";
      if (navOpen && navClose) {
        navOpen.style.display = hidden ? "block" : "none";
        navClose.style.display = hidden ? "none" : "block";
      }
    }
  });
  }
</script>
